package main

import (
	"context"
	"flag"
	"log"
	"net/http"
	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"github.com/infobloxopen/atlas-app-toolkit/gw"
)

var (
	ServerAddr  string
	GatewayAddr string
	SwaggerDir  string
)

func main() {
	// create HTTP handler for gateway
	errHandler := runtime.WithProtoErrorHandler(gw.ProtoMessageErrorHandler)
	serverHandler, err := New{{ .Name | Service }}Handler(context.Background(), ServerAddr, errHandler)
	// strip all but trailing "/" on incoming requests
	serverHandler = http.StripPrefix(
		config.GatewayURL[:len(config.GatewayURL)-1],
		serverHandler,
	)
	if err != nil {
		log.Fatalln(err)
	}
	// map HTTP endpoints to handlers
	mux := http.NewServeMux()
	mux.Handle(config.GatewayURL, serverHandler)
	mux.HandleFunc("/swagger/", SwaggerHandler)
	// serve handlers on the gateway address
	http.ListenAndServe(GatewayAddr, mux)
}

func init() {
	// default gateway values; optionally configured via command-line flags
	flag.StringVar(&ServerAddr, "server", config.ServerAddress, "address of the gRPC server")
	flag.StringVar(&GatewayAddr, "gateway", config.GatewayAddress, "address of the gateway server")
	flag.StringVar(&SwaggerDir, "swagger-dir", "share", "directory of the swagger.json file")
	flag.Parse()
}
