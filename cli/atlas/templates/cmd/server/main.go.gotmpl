package main

import (
	"flag"
	"net"
	"github.com/grpc-ecosystem/go-grpc-middleware"
	"github.com/grpc-ecosystem/go-grpc-middleware/logging/logrus"
	{{ if .WithGateway }}"github.com/infobloxopen/atlas-app-toolkit/mw"{{ end }}
	"github.com/grpc-ecosystem/go-grpc-middleware/validator"
	"github.com/sirupsen/logrus"
	"google.golang.org/grpc"
	{{ if .WithDatabase }}"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"{{ end }}
)

var (
	ServerAddress 			string
	DBConnectionString 	string
)

func main() {
	logger := logrus.New()
	// create new tcp listenerf
	ln, err := net.Listen("tcp", ServerAddress)
	if err != nil {
		logger.Fatalln(err)
	}
	// create new gRPC server with middleware chain
	server := grpc.NewServer(
		grpc.UnaryInterceptor(
			grpc_middleware.ChainUnaryServer(
				// validation middleware
				grpc_validator.UnaryServerInterceptor(),
				{{ if .WithGateway }} 
				// collection operators middleware
				mw.WithCollectionOperator(),
				{{ end }}
				// logging middleware
				grpc_logrus.UnaryServerInterceptor(logrus.NewEntry(logger)),
			),
		),
	){{ if .WithDatabase }}
	// create new postgres database
	db, err := gorm.Open("postgres", DBConnectionString)
	if err != nil {
		logger.Fatalln(err)
	}{{ end }}
	// register service implementation with the grpc server
	s, err := svc.NewBasicServer({{ if .WithDatabase }}db{{ end }})
	if err != nil {
		logger.Fatalln(err)
	}
	pb.Register{{ .Name | Service }}Server(server, s)
	if err := server.Serve(ln); err != nil {
		logger.Fatalln(err)
	}
}

func init() {
	// default server address; optionally set via command-line flags
	flag.StringVar(&ServerAddress, "address", cmd.ServerAddress, "the gRPC server address"){{ if .WithDatabase }}
	flag.StringVar(&DBConnectionString, "db", cmd.DBConnectionString, "the database address"){{ end }}
	flag.Parse()
}
