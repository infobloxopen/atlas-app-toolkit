PROJECT_ROOT 				:= {{ if .Root }}{{ .Root }}/{{ .Name }}{{ else }}{{ .Name }}{{ end }}
BUILD_PATH  				:= bin
DOCKERFILE_PATH 		:= $(CURDIR)/docker

USERNAME            := $(USER)
GIT_COMMIT 					:= $(shell git describe --dirty=-unsupported --always || echo pre-commit)
IMAGE_VERSION				?= $(USERNAME)-dev-$(GIT_COMMIT)

SERVER_BINARY 			:= $(BUILD_PATH)/server
SERVER_PATH 				:= $(PROJECT_ROOT)/cmd/server
SERVER_IMAGE				:= {{ if .Registry }}{{ .Registry }}/{{ end }}{{ .Name }}:$(IMAGE_VERSION)
SERVER_DOCKERFILE 	:= $(DOCKERFILE_PATH)/Dockerfile.server
{{ if .WithGateway }}
GATEWAY_BINARY 			:= $(BUILD_PATH)/gateway
GATEWAY_PATH 				:= $(PROJECT_ROOT)/cmd/gateway
GATEWAY_IMAGE				:= {{ if .Registry }}{{ .Registry }}/{{ end }}{{ .Name }}-gateway:$(IMAGE_VERSION)
GATEWAY_DOCKERFILE 	:= $(DOCKERFILE_PATH)/Dockerfile.gateway
{{ end }}
TEST_UNIT_LOG       := test_unit.log

BUILD_TYPE ?= "default"
ifeq ($(BUILD_TYPE), "default")
	GO_PATH              	:= /go
	SRCROOT_ON_HOST      	:= $(shell dirname $(abspath $(lastword $(MAKEFILE_LIST))))
	SRCROOT_IN_CONTAINER	:= $(GO_PATH)/src/$(PROJECT_ROOT)
	GO_CACHE             	:= -pkgdir $(SRCROOT_IN_CONTAINER)/$(BUILD_PATH)/go-cache
	
	DOCKER_RUNNER        	:= docker run --rm
	DOCKER_RUNNER        	+= -v $(SRCROOT_ON_HOST):$(SRCROOT_IN_CONTAINER)
	DOCKER_BUILDER       	:= infoblox/buildtool:v8
	DOCKER_GENERATOR     	:= infobloxcto/gentool:v1
	BUILDER              	:= $(DOCKER_RUNNER) -w $(SRCROOT_IN_CONTAINER) $(DOCKER_BUILDER)
	GENERATOR            	:= $(DOCKER_RUNNER) $(DOCKER_GENERATOR)
endif

GO_BUILD_FLAGS		?= $(GO_CACHE) -i -v
GO_TEST_FLAGS			?= -v -cover
GO_TEST_PACKAGES	:= $(shell $(BUILDER) go list ./... | grep -v "./vendor/")
SEARCH_GOFILES		:= $(BUILDER) find . -not -path '*/vendor/*' -type f -name "*.go"

.PHONY: default
default: test server{{ if .WithGateway }} gateway{{ end }}

.PHONY: all
all: vendor protobuf test server{{ if .WithGateway }} gateway{{ end }}

.PHONY: fmt
fmt:
	@$(SEARCH_GOFILES) -exec gofmt -s -w {} \;

.PHONY: test
test: fmt
	@$(BUILDER) go test $(GO_TEST_FLAGS) $(GO_TEST_PACKAGES)

.PHONY: server
server: server-build server-docker

.PHONY: server-build
server-build:
	@$(BUILDER) go build $(GO_BUILD_FLAGS) -o $(SERVER_BINARY) $(SERVER_PATH)

.PHONY: server-docker
server-docker: server-build
	@docker build -f $(SERVER_DOCKERFILE) -t $(SERVER_IMAGE) .
{{ if .WithGateway }}
.PHONY: gateway
gateway: gateway-build gateway-docker
	@$(BUILDER) go build $(GO_BUILD_FLAGS) -o $(SERVER_BINARY) $(SERVER_PATH)

.PHONY: gateway-build
gateway-build:
	@$(BUILDER) go build $(GO_BUILD_FLAGS) -o $(GATEWAY_BINARY) $(GATEWAY_PATH)

.PHONY: gateway-docker
gateway-docker:
	@docker build -f $(GATEWAY_DOCKERFILE) -t $(GATEWAY_IMAGE) .
{{ end }}
{{- if .Registry }}
.PHONY: push
push:
	@docker push $(SERVER_IMAGE){{ if .WithGateway }}
	@docker push $(GATEWAY_IMAGE){{ end }}
{{ end }}
.PHONY: protobuf
protobuf:
	@$(GENERATOR) \
	--go_out=plugins=grpc:. \
	{{ if .WithGateway -}}
	--grpc-gateway_out=logtostderr=true:. \
	{{ end -}}
	--validate_out="lang=go:." \
	--swagger_out=:. $(PROJECT_ROOT)/proto/service.proto

.PHONY: vendor
vendor:
	$(BUILDER) dep ensure -vendor-only

.PHONY: vendor-update
vendor-update:
	$(BUILDER) dep ensure
