// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.7
// source: github.com/infobloxopen/atlas-app-toolkit/query/collection_operators.proto

package query

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Order is a sort order.
type SortCriteria_Order int32

const (
	// ascending sort order
	SortCriteria_ASC SortCriteria_Order = 0
	// descending sort order
	SortCriteria_DESC SortCriteria_Order = 1
)

// Enum value maps for SortCriteria_Order.
var (
	SortCriteria_Order_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	SortCriteria_Order_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x SortCriteria_Order) Enum() *SortCriteria_Order {
	p := new(SortCriteria_Order)
	*p = x
	return p
}

func (x SortCriteria_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortCriteria_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_enumTypes[0].Descriptor()
}

func (SortCriteria_Order) Type() protoreflect.EnumType {
	return &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_enumTypes[0]
}

func (x SortCriteria_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortCriteria_Order.Descriptor instead.
func (SortCriteria_Order) EnumDescriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{0, 0}
}

type LogicalOperator_Type int32

const (
	LogicalOperator_AND LogicalOperator_Type = 0
	LogicalOperator_OR  LogicalOperator_Type = 1
)

// Enum value maps for LogicalOperator_Type.
var (
	LogicalOperator_Type_name = map[int32]string{
		0: "AND",
		1: "OR",
	}
	LogicalOperator_Type_value = map[string]int32{
		"AND": 0,
		"OR":  1,
	}
)

func (x LogicalOperator_Type) Enum() *LogicalOperator_Type {
	p := new(LogicalOperator_Type)
	*p = x
	return p
}

func (x LogicalOperator_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogicalOperator_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_enumTypes[1].Descriptor()
}

func (LogicalOperator_Type) Type() protoreflect.EnumType {
	return &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_enumTypes[1]
}

func (x LogicalOperator_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogicalOperator_Type.Descriptor instead.
func (LogicalOperator_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{5, 0}
}

type StringCondition_Type int32

const (
	StringCondition_EQ    StringCondition_Type = 0
	StringCondition_MATCH StringCondition_Type = 1
	StringCondition_GT    StringCondition_Type = 2
	StringCondition_GE    StringCondition_Type = 3
	StringCondition_LT    StringCondition_Type = 4
	StringCondition_LE    StringCondition_Type = 5
	StringCondition_IEQ   StringCondition_Type = 6
)

// Enum value maps for StringCondition_Type.
var (
	StringCondition_Type_name = map[int32]string{
		0: "EQ",
		1: "MATCH",
		2: "GT",
		3: "GE",
		4: "LT",
		5: "LE",
		6: "IEQ",
	}
	StringCondition_Type_value = map[string]int32{
		"EQ":    0,
		"MATCH": 1,
		"GT":    2,
		"GE":    3,
		"LT":    4,
		"LE":    5,
		"IEQ":   6,
	}
)

func (x StringCondition_Type) Enum() *StringCondition_Type {
	p := new(StringCondition_Type)
	*p = x
	return p
}

func (x StringCondition_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StringCondition_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_enumTypes[2].Descriptor()
}

func (StringCondition_Type) Type() protoreflect.EnumType {
	return &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_enumTypes[2]
}

func (x StringCondition_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StringCondition_Type.Descriptor instead.
func (StringCondition_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{6, 0}
}

type NumberCondition_Type int32

const (
	NumberCondition_EQ NumberCondition_Type = 0
	NumberCondition_GT NumberCondition_Type = 1
	NumberCondition_GE NumberCondition_Type = 2
	NumberCondition_LT NumberCondition_Type = 3
	NumberCondition_LE NumberCondition_Type = 4
)

// Enum value maps for NumberCondition_Type.
var (
	NumberCondition_Type_name = map[int32]string{
		0: "EQ",
		1: "GT",
		2: "GE",
		3: "LT",
		4: "LE",
	}
	NumberCondition_Type_value = map[string]int32{
		"EQ": 0,
		"GT": 1,
		"GE": 2,
		"LT": 3,
		"LE": 4,
	}
)

func (x NumberCondition_Type) Enum() *NumberCondition_Type {
	p := new(NumberCondition_Type)
	*p = x
	return p
}

func (x NumberCondition_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NumberCondition_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_enumTypes[3].Descriptor()
}

func (NumberCondition_Type) Type() protoreflect.EnumType {
	return &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_enumTypes[3]
}

func (x NumberCondition_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NumberCondition_Type.Descriptor instead.
func (NumberCondition_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{7, 0}
}

type StringArrayCondition_Type int32

const (
	StringArrayCondition_IN StringArrayCondition_Type = 0
)

// Enum value maps for StringArrayCondition_Type.
var (
	StringArrayCondition_Type_name = map[int32]string{
		0: "IN",
	}
	StringArrayCondition_Type_value = map[string]int32{
		"IN": 0,
	}
)

func (x StringArrayCondition_Type) Enum() *StringArrayCondition_Type {
	p := new(StringArrayCondition_Type)
	*p = x
	return p
}

func (x StringArrayCondition_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StringArrayCondition_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_enumTypes[4].Descriptor()
}

func (StringArrayCondition_Type) Type() protoreflect.EnumType {
	return &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_enumTypes[4]
}

func (x StringArrayCondition_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StringArrayCondition_Type.Descriptor instead.
func (StringArrayCondition_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{9, 0}
}

type NumberArrayCondition_Type int32

const (
	NumberArrayCondition_IN NumberArrayCondition_Type = 0
)

// Enum value maps for NumberArrayCondition_Type.
var (
	NumberArrayCondition_Type_name = map[int32]string{
		0: "IN",
	}
	NumberArrayCondition_Type_value = map[string]int32{
		"IN": 0,
	}
)

func (x NumberArrayCondition_Type) Enum() *NumberArrayCondition_Type {
	p := new(NumberArrayCondition_Type)
	*p = x
	return p
}

func (x NumberArrayCondition_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NumberArrayCondition_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_enumTypes[5].Descriptor()
}

func (NumberArrayCondition_Type) Type() protoreflect.EnumType {
	return &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_enumTypes[5]
}

func (x NumberArrayCondition_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NumberArrayCondition_Type.Descriptor instead.
func (NumberArrayCondition_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{10, 0}
}

// SortCriteria represents sort criteria
type SortCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tag is a JSON tag.
	Tag   string             `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Order SortCriteria_Order `protobuf:"varint,2,opt,name=order,proto3,enum=infoblox.api.SortCriteria_Order" json:"order,omitempty"`
}

func (x *SortCriteria) Reset() {
	*x = SortCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortCriteria) ProtoMessage() {}

func (x *SortCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortCriteria.ProtoReflect.Descriptor instead.
func (*SortCriteria) Descriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{0}
}

func (x *SortCriteria) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *SortCriteria) GetOrder() SortCriteria_Order {
	if x != nil {
		return x.Order
	}
	return SortCriteria_ASC
}

// Sorting represents list of sort criterias.
type Sorting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Criterias []*SortCriteria `protobuf:"bytes,1,rep,name=criterias,proto3" json:"criterias,omitempty"`
}

func (x *Sorting) Reset() {
	*x = Sorting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sorting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sorting) ProtoMessage() {}

func (x *Sorting) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sorting.ProtoReflect.Descriptor instead.
func (*Sorting) Descriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{1}
}

func (x *Sorting) GetCriterias() []*SortCriteria {
	if x != nil {
		return x.Criterias
	}
	return nil
}

// FieldSelection represents a group of fields for some object.
// Main use case for if is to store information about object fields that
// need to be ratained prior to sending object as a response
type FieldSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields map[string]*Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FieldSelection) Reset() {
	*x = FieldSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldSelection) ProtoMessage() {}

func (x *FieldSelection) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldSelection.ProtoReflect.Descriptor instead.
func (*FieldSelection) Descriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{2}
}

func (x *FieldSelection) GetFields() map[string]*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Field represents a single field for an object.
// It contains fields name and also may contain a group of sub-fields for cases
// when a fields represents some structure.
type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Subs map[string]*Field `protobuf:"bytes,2,rep,name=subs,proto3" json:"subs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{3}
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetSubs() map[string]*Field {
	if x != nil {
		return x.Subs
	}
	return nil
}

// Filtering represents filtering expression.
// root could be either LogicalOperator or one of the supported conditions.
type Filtering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Root:
	//	*Filtering_Operator
	//	*Filtering_StringCondition
	//	*Filtering_NumberCondition
	//	*Filtering_NullCondition
	//	*Filtering_StringArrayCondition
	//	*Filtering_NumberArrayCondition
	Root isFiltering_Root `protobuf_oneof:"root"`
}

func (x *Filtering) Reset() {
	*x = Filtering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filtering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filtering) ProtoMessage() {}

func (x *Filtering) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filtering.ProtoReflect.Descriptor instead.
func (*Filtering) Descriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{4}
}

func (m *Filtering) GetRoot() isFiltering_Root {
	if m != nil {
		return m.Root
	}
	return nil
}

func (x *Filtering) GetOperator() *LogicalOperator {
	if x, ok := x.GetRoot().(*Filtering_Operator); ok {
		return x.Operator
	}
	return nil
}

func (x *Filtering) GetStringCondition() *StringCondition {
	if x, ok := x.GetRoot().(*Filtering_StringCondition); ok {
		return x.StringCondition
	}
	return nil
}

func (x *Filtering) GetNumberCondition() *NumberCondition {
	if x, ok := x.GetRoot().(*Filtering_NumberCondition); ok {
		return x.NumberCondition
	}
	return nil
}

func (x *Filtering) GetNullCondition() *NullCondition {
	if x, ok := x.GetRoot().(*Filtering_NullCondition); ok {
		return x.NullCondition
	}
	return nil
}

func (x *Filtering) GetStringArrayCondition() *StringArrayCondition {
	if x, ok := x.GetRoot().(*Filtering_StringArrayCondition); ok {
		return x.StringArrayCondition
	}
	return nil
}

func (x *Filtering) GetNumberArrayCondition() *NumberArrayCondition {
	if x, ok := x.GetRoot().(*Filtering_NumberArrayCondition); ok {
		return x.NumberArrayCondition
	}
	return nil
}

type isFiltering_Root interface {
	isFiltering_Root()
}

type Filtering_Operator struct {
	Operator *LogicalOperator `protobuf:"bytes,1,opt,name=operator,proto3,oneof"`
}

type Filtering_StringCondition struct {
	StringCondition *StringCondition `protobuf:"bytes,2,opt,name=string_condition,json=stringCondition,proto3,oneof"`
}

type Filtering_NumberCondition struct {
	NumberCondition *NumberCondition `protobuf:"bytes,3,opt,name=number_condition,json=numberCondition,proto3,oneof"`
}

type Filtering_NullCondition struct {
	NullCondition *NullCondition `protobuf:"bytes,4,opt,name=null_condition,json=nullCondition,proto3,oneof"`
}

type Filtering_StringArrayCondition struct {
	StringArrayCondition *StringArrayCondition `protobuf:"bytes,5,opt,name=string_array_condition,json=stringArrayCondition,proto3,oneof"`
}

type Filtering_NumberArrayCondition struct {
	NumberArrayCondition *NumberArrayCondition `protobuf:"bytes,6,opt,name=number_array_condition,json=numberArrayCondition,proto3,oneof"`
}

func (*Filtering_Operator) isFiltering_Root() {}

func (*Filtering_StringCondition) isFiltering_Root() {}

func (*Filtering_NumberCondition) isFiltering_Root() {}

func (*Filtering_NullCondition) isFiltering_Root() {}

func (*Filtering_StringArrayCondition) isFiltering_Root() {}

func (*Filtering_NumberArrayCondition) isFiltering_Root() {}

// LogicalOperator represents binary logical operator, either AND or OR depending on type.
// left and right are respectively left and right operands of the operator, could be
// either LogicalOperator or one of the supported conditions.
// is_negative is set to true if the operator is negated.
type LogicalOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Left:
	//	*LogicalOperator_LeftOperator
	//	*LogicalOperator_LeftStringCondition
	//	*LogicalOperator_LeftNumberCondition
	//	*LogicalOperator_LeftNullCondition
	//	*LogicalOperator_LeftStringArrayCondition
	//	*LogicalOperator_LeftNumberArrayCondition
	Left isLogicalOperator_Left `protobuf_oneof:"left"`
	// Types that are assignable to Right:
	//	*LogicalOperator_RightOperator
	//	*LogicalOperator_RightStringCondition
	//	*LogicalOperator_RightNumberCondition
	//	*LogicalOperator_RightNullCondition
	//	*LogicalOperator_RightStringArrayCondition
	//	*LogicalOperator_RightNumberArrayCondition
	Right      isLogicalOperator_Right `protobuf_oneof:"right"`
	Type       LogicalOperator_Type    `protobuf:"varint,9,opt,name=type,proto3,enum=infoblox.api.LogicalOperator_Type" json:"type,omitempty"`
	IsNegative bool                    `protobuf:"varint,10,opt,name=is_negative,json=isNegative,proto3" json:"is_negative,omitempty"`
}

func (x *LogicalOperator) Reset() {
	*x = LogicalOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalOperator) ProtoMessage() {}

func (x *LogicalOperator) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalOperator.ProtoReflect.Descriptor instead.
func (*LogicalOperator) Descriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{5}
}

func (m *LogicalOperator) GetLeft() isLogicalOperator_Left {
	if m != nil {
		return m.Left
	}
	return nil
}

func (x *LogicalOperator) GetLeftOperator() *LogicalOperator {
	if x, ok := x.GetLeft().(*LogicalOperator_LeftOperator); ok {
		return x.LeftOperator
	}
	return nil
}

func (x *LogicalOperator) GetLeftStringCondition() *StringCondition {
	if x, ok := x.GetLeft().(*LogicalOperator_LeftStringCondition); ok {
		return x.LeftStringCondition
	}
	return nil
}

func (x *LogicalOperator) GetLeftNumberCondition() *NumberCondition {
	if x, ok := x.GetLeft().(*LogicalOperator_LeftNumberCondition); ok {
		return x.LeftNumberCondition
	}
	return nil
}

func (x *LogicalOperator) GetLeftNullCondition() *NullCondition {
	if x, ok := x.GetLeft().(*LogicalOperator_LeftNullCondition); ok {
		return x.LeftNullCondition
	}
	return nil
}

func (x *LogicalOperator) GetLeftStringArrayCondition() *StringArrayCondition {
	if x, ok := x.GetLeft().(*LogicalOperator_LeftStringArrayCondition); ok {
		return x.LeftStringArrayCondition
	}
	return nil
}

func (x *LogicalOperator) GetLeftNumberArrayCondition() *NumberArrayCondition {
	if x, ok := x.GetLeft().(*LogicalOperator_LeftNumberArrayCondition); ok {
		return x.LeftNumberArrayCondition
	}
	return nil
}

func (m *LogicalOperator) GetRight() isLogicalOperator_Right {
	if m != nil {
		return m.Right
	}
	return nil
}

func (x *LogicalOperator) GetRightOperator() *LogicalOperator {
	if x, ok := x.GetRight().(*LogicalOperator_RightOperator); ok {
		return x.RightOperator
	}
	return nil
}

func (x *LogicalOperator) GetRightStringCondition() *StringCondition {
	if x, ok := x.GetRight().(*LogicalOperator_RightStringCondition); ok {
		return x.RightStringCondition
	}
	return nil
}

func (x *LogicalOperator) GetRightNumberCondition() *NumberCondition {
	if x, ok := x.GetRight().(*LogicalOperator_RightNumberCondition); ok {
		return x.RightNumberCondition
	}
	return nil
}

func (x *LogicalOperator) GetRightNullCondition() *NullCondition {
	if x, ok := x.GetRight().(*LogicalOperator_RightNullCondition); ok {
		return x.RightNullCondition
	}
	return nil
}

func (x *LogicalOperator) GetRightStringArrayCondition() *StringArrayCondition {
	if x, ok := x.GetRight().(*LogicalOperator_RightStringArrayCondition); ok {
		return x.RightStringArrayCondition
	}
	return nil
}

func (x *LogicalOperator) GetRightNumberArrayCondition() *NumberArrayCondition {
	if x, ok := x.GetRight().(*LogicalOperator_RightNumberArrayCondition); ok {
		return x.RightNumberArrayCondition
	}
	return nil
}

func (x *LogicalOperator) GetType() LogicalOperator_Type {
	if x != nil {
		return x.Type
	}
	return LogicalOperator_AND
}

func (x *LogicalOperator) GetIsNegative() bool {
	if x != nil {
		return x.IsNegative
	}
	return false
}

type isLogicalOperator_Left interface {
	isLogicalOperator_Left()
}

type LogicalOperator_LeftOperator struct {
	LeftOperator *LogicalOperator `protobuf:"bytes,1,opt,name=left_operator,json=leftOperator,proto3,oneof"`
}

type LogicalOperator_LeftStringCondition struct {
	LeftStringCondition *StringCondition `protobuf:"bytes,2,opt,name=left_string_condition,json=leftStringCondition,proto3,oneof"`
}

type LogicalOperator_LeftNumberCondition struct {
	LeftNumberCondition *NumberCondition `protobuf:"bytes,3,opt,name=left_number_condition,json=leftNumberCondition,proto3,oneof"`
}

type LogicalOperator_LeftNullCondition struct {
	LeftNullCondition *NullCondition `protobuf:"bytes,4,opt,name=left_null_condition,json=leftNullCondition,proto3,oneof"`
}

type LogicalOperator_LeftStringArrayCondition struct {
	LeftStringArrayCondition *StringArrayCondition `protobuf:"bytes,11,opt,name=left_string_array_condition,json=leftStringArrayCondition,proto3,oneof"`
}

type LogicalOperator_LeftNumberArrayCondition struct {
	LeftNumberArrayCondition *NumberArrayCondition `protobuf:"bytes,12,opt,name=left_number_array_condition,json=leftNumberArrayCondition,proto3,oneof"`
}

func (*LogicalOperator_LeftOperator) isLogicalOperator_Left() {}

func (*LogicalOperator_LeftStringCondition) isLogicalOperator_Left() {}

func (*LogicalOperator_LeftNumberCondition) isLogicalOperator_Left() {}

func (*LogicalOperator_LeftNullCondition) isLogicalOperator_Left() {}

func (*LogicalOperator_LeftStringArrayCondition) isLogicalOperator_Left() {}

func (*LogicalOperator_LeftNumberArrayCondition) isLogicalOperator_Left() {}

type isLogicalOperator_Right interface {
	isLogicalOperator_Right()
}

type LogicalOperator_RightOperator struct {
	RightOperator *LogicalOperator `protobuf:"bytes,5,opt,name=right_operator,json=rightOperator,proto3,oneof"`
}

type LogicalOperator_RightStringCondition struct {
	RightStringCondition *StringCondition `protobuf:"bytes,6,opt,name=right_string_condition,json=rightStringCondition,proto3,oneof"`
}

type LogicalOperator_RightNumberCondition struct {
	RightNumberCondition *NumberCondition `protobuf:"bytes,7,opt,name=right_number_condition,json=rightNumberCondition,proto3,oneof"`
}

type LogicalOperator_RightNullCondition struct {
	RightNullCondition *NullCondition `protobuf:"bytes,8,opt,name=right_null_condition,json=rightNullCondition,proto3,oneof"`
}

type LogicalOperator_RightStringArrayCondition struct {
	RightStringArrayCondition *StringArrayCondition `protobuf:"bytes,13,opt,name=right_string_array_condition,json=rightStringArrayCondition,proto3,oneof"`
}

type LogicalOperator_RightNumberArrayCondition struct {
	RightNumberArrayCondition *NumberArrayCondition `protobuf:"bytes,14,opt,name=right_number_array_condition,json=rightNumberArrayCondition,proto3,oneof"`
}

func (*LogicalOperator_RightOperator) isLogicalOperator_Right() {}

func (*LogicalOperator_RightStringCondition) isLogicalOperator_Right() {}

func (*LogicalOperator_RightNumberCondition) isLogicalOperator_Right() {}

func (*LogicalOperator_RightNullCondition) isLogicalOperator_Right() {}

func (*LogicalOperator_RightStringArrayCondition) isLogicalOperator_Right() {}

func (*LogicalOperator_RightNumberArrayCondition) isLogicalOperator_Right() {}

// StringCondition represents a condition with a string literal, e.g. field == 'string'.
// field_path is a reference to a value of a resource.
// value is the string literal.
// type is a type of the condition.
// is_negative is set to true if the condition is negated.
type StringCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldPath  []string             `protobuf:"bytes,1,rep,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	Value      string               `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type       StringCondition_Type `protobuf:"varint,3,opt,name=type,proto3,enum=infoblox.api.StringCondition_Type" json:"type,omitempty"`
	IsNegative bool                 `protobuf:"varint,4,opt,name=is_negative,json=isNegative,proto3" json:"is_negative,omitempty"`
}

func (x *StringCondition) Reset() {
	*x = StringCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringCondition) ProtoMessage() {}

func (x *StringCondition) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringCondition.ProtoReflect.Descriptor instead.
func (*StringCondition) Descriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{6}
}

func (x *StringCondition) GetFieldPath() []string {
	if x != nil {
		return x.FieldPath
	}
	return nil
}

func (x *StringCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *StringCondition) GetType() StringCondition_Type {
	if x != nil {
		return x.Type
	}
	return StringCondition_EQ
}

func (x *StringCondition) GetIsNegative() bool {
	if x != nil {
		return x.IsNegative
	}
	return false
}

// NumberCondition represents a condition with a number literal, e.g. field > 3.
// field_path is a reference to a value of a resource.
// value is the number literal.
// type is a type of the condition.
// is_negative is set to true if the condition is negated.
type NumberCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldPath  []string             `protobuf:"bytes,1,rep,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	Value      float64              `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Type       NumberCondition_Type `protobuf:"varint,3,opt,name=type,proto3,enum=infoblox.api.NumberCondition_Type" json:"type,omitempty"`
	IsNegative bool                 `protobuf:"varint,4,opt,name=is_negative,json=isNegative,proto3" json:"is_negative,omitempty"`
}

func (x *NumberCondition) Reset() {
	*x = NumberCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberCondition) ProtoMessage() {}

func (x *NumberCondition) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberCondition.ProtoReflect.Descriptor instead.
func (*NumberCondition) Descriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{7}
}

func (x *NumberCondition) GetFieldPath() []string {
	if x != nil {
		return x.FieldPath
	}
	return nil
}

func (x *NumberCondition) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *NumberCondition) GetType() NumberCondition_Type {
	if x != nil {
		return x.Type
	}
	return NumberCondition_EQ
}

func (x *NumberCondition) GetIsNegative() bool {
	if x != nil {
		return x.IsNegative
	}
	return false
}

// NullCondition represents a condition with a null literal, e.g. field == null.
// field_path is a reference to a value of a resource.
// is_negative is set to true if the condition is negated.
type NullCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldPath  []string `protobuf:"bytes,1,rep,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	IsNegative bool     `protobuf:"varint,2,opt,name=is_negative,json=isNegative,proto3" json:"is_negative,omitempty"`
}

func (x *NullCondition) Reset() {
	*x = NullCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullCondition) ProtoMessage() {}

func (x *NullCondition) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullCondition.ProtoReflect.Descriptor instead.
func (*NullCondition) Descriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{8}
}

func (x *NullCondition) GetFieldPath() []string {
	if x != nil {
		return x.FieldPath
	}
	return nil
}

func (x *NullCondition) GetIsNegative() bool {
	if x != nil {
		return x.IsNegative
	}
	return false
}

// StringArrayCondition represents a condition with string arrays, e.g. field in ['hello','world']
// field_path is a reference to a value of a resource.
// is_negative is set to true if the condition is negated
type StringArrayCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldPath  []string                  `protobuf:"bytes,1,rep,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	Values     []string                  `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	Type       StringArrayCondition_Type `protobuf:"varint,3,opt,name=type,proto3,enum=infoblox.api.StringArrayCondition_Type" json:"type,omitempty"`
	IsNegative bool                      `protobuf:"varint,4,opt,name=is_negative,json=isNegative,proto3" json:"is_negative,omitempty"`
}

func (x *StringArrayCondition) Reset() {
	*x = StringArrayCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringArrayCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringArrayCondition) ProtoMessage() {}

func (x *StringArrayCondition) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringArrayCondition.ProtoReflect.Descriptor instead.
func (*StringArrayCondition) Descriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{9}
}

func (x *StringArrayCondition) GetFieldPath() []string {
	if x != nil {
		return x.FieldPath
	}
	return nil
}

func (x *StringArrayCondition) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *StringArrayCondition) GetType() StringArrayCondition_Type {
	if x != nil {
		return x.Type
	}
	return StringArrayCondition_IN
}

func (x *StringArrayCondition) GetIsNegative() bool {
	if x != nil {
		return x.IsNegative
	}
	return false
}

// NumberArrayCondition represents a condition with string arrays, e.g. field in [1, 5, 7]
// field_path is a reference to a value of a resource.
// is_negative is set to true if the condition is negated
type NumberArrayCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldPath  []string                  `protobuf:"bytes,1,rep,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	Values     []float64                 `protobuf:"fixed64,2,rep,packed,name=values,proto3" json:"values,omitempty"`
	Type       NumberArrayCondition_Type `protobuf:"varint,3,opt,name=type,proto3,enum=infoblox.api.NumberArrayCondition_Type" json:"type,omitempty"`
	IsNegative bool                      `protobuf:"varint,4,opt,name=is_negative,json=isNegative,proto3" json:"is_negative,omitempty"`
}

func (x *NumberArrayCondition) Reset() {
	*x = NumberArrayCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberArrayCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberArrayCondition) ProtoMessage() {}

func (x *NumberArrayCondition) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberArrayCondition.ProtoReflect.Descriptor instead.
func (*NumberArrayCondition) Descriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{10}
}

func (x *NumberArrayCondition) GetFieldPath() []string {
	if x != nil {
		return x.FieldPath
	}
	return nil
}

func (x *NumberArrayCondition) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *NumberArrayCondition) GetType() NumberArrayCondition_Type {
	if x != nil {
		return x.Type
	}
	return NumberArrayCondition_IN
}

func (x *NumberArrayCondition) GetIsNegative() bool {
	if x != nil {
		return x.IsNegative
	}
	return false
}

// Pagination represents both server-driven and client-driven pagination request.
// Server-driven pagination is a model in which the server returns some
// amount of data along with an token indicating there is more data
// and where subsequent queries can get the next page of data.
// Client-driven pagination is a model in which rows are addressable by
// offset and page size (limit).
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The service-defined string used to identify a page of resources.
	// A null value indicates the first page.
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The integer index of the offset into a collection of resources.
	// If omitted or null the value is assumed to be "0".
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// The integer number of resources to be returned in the response.
	// The service may impose maximum value.
	// If omitted the service may impose a default value.
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{11}
}

func (x *Pagination) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *Pagination) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Pagination) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// PageInfo represents both server-driven and client-driven pagination response.
// Server-driven pagination is a model in which the server returns some
// amount of data along with an token indicating there is more data
// and where subsequent queries can get the next page of data.
// Client-driven pagination is a model in which rows are addressable by
// offset and page size (limit).
type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The service response should contain a string to indicate
	// the next page of resources.
	// A null value indicates no more pages.
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The service may optionally include the total number of resources being paged.
	Size int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// The service may optionally include the offset of the next page of resources.
	// A null value indicates no more pages.
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{12}
}

func (x *PageInfo) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *PageInfo) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PageInfo) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Searching represents search by.
type Searching struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *Searching) Reset() {
	*x = Searching{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Searching) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Searching) ProtoMessage() {}

func (x *Searching) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Searching.ProtoReflect.Descriptor instead.
func (*Searching) Descriptor() ([]byte, []int) {
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP(), []int{13}
}

func (x *Searching) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

var File_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto protoreflect.FileDescriptor

var file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDesc = []byte{
	0x0a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66,
	0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2d,
	0x61, 0x70, 0x70, 0x2d, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x69, 0x6e,
	0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x74, 0x0a, 0x0c, 0x53, 0x6f,
	0x72, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x1a, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01,
	0x22, 0x61, 0x0a, 0x07, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x09, 0x63, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x73, 0x3a, 0x1c, 0x92, 0x41, 0x19, 0x0a, 0x17, 0x32, 0x11, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x9a,
	0x02, 0x01, 0x07, 0x22, 0xc8, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x4e, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62,
	0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x24, 0x92, 0x41, 0x21, 0x0a, 0x1f, 0x32,
	0x19, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x9a, 0x02, 0x01, 0x07, 0x22, 0x9c,
	0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x04,
	0x73, 0x75, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x73, 0x75, 0x62, 0x73, 0x1a,
	0x4c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x04,
	0x0a, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x0e, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62,
	0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x16, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x1e,
	0x92, 0x41, 0x1b, 0x0a, 0x19, 0x32, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x9a, 0x02, 0x01, 0x07, 0x42, 0x06,
	0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0xb2, 0x09, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x0d, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x53, 0x0a, 0x15, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x13, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x15, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x6c, 0x65, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x13, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x65, 0x66, 0x74, 0x4e, 0x75, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x1b, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63,
	0x0a, 0x1b, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x6c, 0x65, 0x66, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0d, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x16, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x14, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x16, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x01, 0x52, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x14, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x1c, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x19, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x65, 0x0a, 0x1c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x19, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x22, 0x17, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x0f,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0x42, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x02,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x45, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x04,
	0x12, 0x06, 0x0a, 0x02, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x45, 0x51, 0x10,
	0x06, 0x22, 0xcf, 0x01, 0x0a, 0x0f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62,
	0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x22, 0x2e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x45,
	0x51, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x47,
	0x45, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x4c,
	0x45, 0x10, 0x04, 0x22, 0x4f, 0x0a, 0x0d, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x22, 0x0e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e,
	0x10, 0x00, 0x22, 0xbb, 0x01, 0x0a, 0x14, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x22, 0x0e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x00,
	0x22, 0x76, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x1b, 0x92, 0x41, 0x18,
	0x0a, 0x16, 0x32, 0x10, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x9a, 0x02, 0x01, 0x07, 0x22, 0x55, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0x41, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x3a, 0x1e, 0x92, 0x41, 0x1b, 0x0a, 0x19, 0x32, 0x13, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x62, 0x79, 0x9a, 0x02,
	0x01, 0x07, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6c, 0x6f, 0x78, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2d, 0x61, 0x70, 0x70, 0x2d, 0x74, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x3b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescOnce sync.Once
	file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescData = file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDesc
)

func file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescGZIP() []byte {
	file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescOnce.Do(func() {
		file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescData)
	})
	return file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDescData
}

var file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_goTypes = []interface{}{
	(SortCriteria_Order)(0),        // 0: infoblox.api.SortCriteria.Order
	(LogicalOperator_Type)(0),      // 1: infoblox.api.LogicalOperator.Type
	(StringCondition_Type)(0),      // 2: infoblox.api.StringCondition.Type
	(NumberCondition_Type)(0),      // 3: infoblox.api.NumberCondition.Type
	(StringArrayCondition_Type)(0), // 4: infoblox.api.StringArrayCondition.Type
	(NumberArrayCondition_Type)(0), // 5: infoblox.api.NumberArrayCondition.Type
	(*SortCriteria)(nil),           // 6: infoblox.api.SortCriteria
	(*Sorting)(nil),                // 7: infoblox.api.Sorting
	(*FieldSelection)(nil),         // 8: infoblox.api.FieldSelection
	(*Field)(nil),                  // 9: infoblox.api.Field
	(*Filtering)(nil),              // 10: infoblox.api.Filtering
	(*LogicalOperator)(nil),        // 11: infoblox.api.LogicalOperator
	(*StringCondition)(nil),        // 12: infoblox.api.StringCondition
	(*NumberCondition)(nil),        // 13: infoblox.api.NumberCondition
	(*NullCondition)(nil),          // 14: infoblox.api.NullCondition
	(*StringArrayCondition)(nil),   // 15: infoblox.api.StringArrayCondition
	(*NumberArrayCondition)(nil),   // 16: infoblox.api.NumberArrayCondition
	(*Pagination)(nil),             // 17: infoblox.api.Pagination
	(*PageInfo)(nil),               // 18: infoblox.api.PageInfo
	(*Searching)(nil),              // 19: infoblox.api.Searching
	nil,                            // 20: infoblox.api.FieldSelection.FieldsEntry
	nil,                            // 21: infoblox.api.Field.SubsEntry
}
var file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_depIdxs = []int32{
	0,  // 0: infoblox.api.SortCriteria.order:type_name -> infoblox.api.SortCriteria.Order
	6,  // 1: infoblox.api.Sorting.criterias:type_name -> infoblox.api.SortCriteria
	20, // 2: infoblox.api.FieldSelection.fields:type_name -> infoblox.api.FieldSelection.FieldsEntry
	21, // 3: infoblox.api.Field.subs:type_name -> infoblox.api.Field.SubsEntry
	11, // 4: infoblox.api.Filtering.operator:type_name -> infoblox.api.LogicalOperator
	12, // 5: infoblox.api.Filtering.string_condition:type_name -> infoblox.api.StringCondition
	13, // 6: infoblox.api.Filtering.number_condition:type_name -> infoblox.api.NumberCondition
	14, // 7: infoblox.api.Filtering.null_condition:type_name -> infoblox.api.NullCondition
	15, // 8: infoblox.api.Filtering.string_array_condition:type_name -> infoblox.api.StringArrayCondition
	16, // 9: infoblox.api.Filtering.number_array_condition:type_name -> infoblox.api.NumberArrayCondition
	11, // 10: infoblox.api.LogicalOperator.left_operator:type_name -> infoblox.api.LogicalOperator
	12, // 11: infoblox.api.LogicalOperator.left_string_condition:type_name -> infoblox.api.StringCondition
	13, // 12: infoblox.api.LogicalOperator.left_number_condition:type_name -> infoblox.api.NumberCondition
	14, // 13: infoblox.api.LogicalOperator.left_null_condition:type_name -> infoblox.api.NullCondition
	15, // 14: infoblox.api.LogicalOperator.left_string_array_condition:type_name -> infoblox.api.StringArrayCondition
	16, // 15: infoblox.api.LogicalOperator.left_number_array_condition:type_name -> infoblox.api.NumberArrayCondition
	11, // 16: infoblox.api.LogicalOperator.right_operator:type_name -> infoblox.api.LogicalOperator
	12, // 17: infoblox.api.LogicalOperator.right_string_condition:type_name -> infoblox.api.StringCondition
	13, // 18: infoblox.api.LogicalOperator.right_number_condition:type_name -> infoblox.api.NumberCondition
	14, // 19: infoblox.api.LogicalOperator.right_null_condition:type_name -> infoblox.api.NullCondition
	15, // 20: infoblox.api.LogicalOperator.right_string_array_condition:type_name -> infoblox.api.StringArrayCondition
	16, // 21: infoblox.api.LogicalOperator.right_number_array_condition:type_name -> infoblox.api.NumberArrayCondition
	1,  // 22: infoblox.api.LogicalOperator.type:type_name -> infoblox.api.LogicalOperator.Type
	2,  // 23: infoblox.api.StringCondition.type:type_name -> infoblox.api.StringCondition.Type
	3,  // 24: infoblox.api.NumberCondition.type:type_name -> infoblox.api.NumberCondition.Type
	4,  // 25: infoblox.api.StringArrayCondition.type:type_name -> infoblox.api.StringArrayCondition.Type
	5,  // 26: infoblox.api.NumberArrayCondition.type:type_name -> infoblox.api.NumberArrayCondition.Type
	9,  // 27: infoblox.api.FieldSelection.FieldsEntry.value:type_name -> infoblox.api.Field
	9,  // 28: infoblox.api.Field.SubsEntry.value:type_name -> infoblox.api.Field
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_init() }
func file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_init() {
	if File_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sorting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filtering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringArrayCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberArrayCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Searching); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Filtering_Operator)(nil),
		(*Filtering_StringCondition)(nil),
		(*Filtering_NumberCondition)(nil),
		(*Filtering_NullCondition)(nil),
		(*Filtering_StringArrayCondition)(nil),
		(*Filtering_NumberArrayCondition)(nil),
	}
	file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*LogicalOperator_LeftOperator)(nil),
		(*LogicalOperator_LeftStringCondition)(nil),
		(*LogicalOperator_LeftNumberCondition)(nil),
		(*LogicalOperator_LeftNullCondition)(nil),
		(*LogicalOperator_LeftStringArrayCondition)(nil),
		(*LogicalOperator_LeftNumberArrayCondition)(nil),
		(*LogicalOperator_RightOperator)(nil),
		(*LogicalOperator_RightStringCondition)(nil),
		(*LogicalOperator_RightNumberCondition)(nil),
		(*LogicalOperator_RightNullCondition)(nil),
		(*LogicalOperator_RightStringArrayCondition)(nil),
		(*LogicalOperator_RightNumberArrayCondition)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_goTypes,
		DependencyIndexes: file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_depIdxs,
		EnumInfos:         file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_enumTypes,
		MessageInfos:      file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_msgTypes,
	}.Build()
	File_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto = out.File
	file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_rawDesc = nil
	file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_goTypes = nil
	file_github_com_infobloxopen_atlas_app_toolkit_query_collection_operators_proto_depIdxs = nil
}
